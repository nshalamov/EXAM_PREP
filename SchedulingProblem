import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Scanner;
import java.util.stream.Collectors;

public class StackAndQueue {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        ArrayDeque<Integer> taskStack = new ArrayDeque<>();
        ArrayDeque<Integer> threadQueue = new ArrayDeque<>();

        Arrays.stream(scan.nextLine().split(", "))
                .map(Integer::valueOf)
                .forEach(taskStack::push);

        Arrays.stream(scan.nextLine().split("\\s+"))
                .map(Integer::valueOf)
                .forEach(threadQueue::offer);

        int taskToEliminate = Integer.parseInt(scan.nextLine());
        int kingThread = -100500;

        while (taskStack.contains(taskToEliminate)) {
            int currentTask = taskStack.peek();
            int currentThread = threadQueue.peek();

            if (currentTask == taskToEliminate) {
                kingThread = currentThread;
                break;
            }

            if (currentThread >= currentTask) {
                taskStack.pop();
            }
            threadQueue.poll();


        }

        System.out.println(String.format("Thread with value %d killed task %d", kingThread, taskToEliminate));
        System.out.println(threadQueue.stream().map(String::valueOf).collect(Collectors.joining(" ")));
    }
}
